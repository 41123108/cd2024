<h1>About</h1>
<p>網頁: <a href="https://41123108.github.io/cd2024/">https://41123108.github.io/cd2024/</a></p>
<p>網誌: <a href="https://41123108.github.io/cd2024/blog">https://41123108.github.io/cd2024/blog</a></p>
<p>簡報: <a href="https://41123108.github.io/cd2024/reveal">https://41123108.github.io/cd2024/reveal</a> </p>
<p>倉儲: <a href="https://github.com/41123108/cd2024">https://github.com/41123108/cd2024</a></p>
<p></p>
<h1>cmsimde</h1>
<p><span style="background-color: #ccffcc;">SMap</span> - SiteMap - 依照階次列出網站的所有頁面.</p>
<p><span style="background-color: #ccffcc;">EditA</span> - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本.</p>
<p><span style="background-color: #ccffcc;">Edit</span> - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式.</p>
<p><span style="background-color: #ccffcc;">Config</span> - Configure Site - 編輯頁面標題與管理者密碼.</p>
<p><span style="background-color: #ccffcc;">Search</span> - 動態頁面內容的關鍵字搜尋.</p>
<p><span style="background-color: #ccffcc;">IUpload</span> - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小.</p>
<p><span style="background-color: #ccffcc;">IList</span> - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案.</p>
<p><span style="background-color: #ccffcc;">FUpload</span> - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改.</p>
<p><span style="background-color: #ccffcc;">FList</span> - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案.</p>
<p><span style="background-color: #ccffcc;">Logout</span> - 登出頁面編輯模式.</p>
<p><span style="background-color: #ccffcc;">Convert</span> - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁.</p>
<p><span style="background-color: #ccffcc;">acp</span> - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲.</p>
<p><span style="background-color: #ccffcc;">SStatic</span> - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容.</p>
<p><span style="background-color: #ccffcc;">RStatic</span> - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站.</p>
<p><span style="background-color: #ccffcc;">80</span> - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80.</p>
<p></p>
<h1>Replit</h1>
<p><a href="https://replit.com">https://replit.com</a></p>
<p>利用 init_replit 指令安裝所需 Python 模組<br/><br/>chmod u+x init_replit<br/><br/>./init_replit</p>
<p dir="auto">On Replit:</p>
<p dir="auto">.replit: python3 main.py</p>
<p dir="auto">chmod u+x cms init_replit</p>
<p dir="auto">./init_replit</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde_site (not needed): git submodule update --init --recursive</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent</p>
<p dir="auto">password generator: <a href="https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py">https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py</a> </p>
<p dir="auto"></p>
<p dir="auto">for IPv6 only Ubuntu:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.com<br/>ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p<br/><br/>for Replit:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.co<br/>#since Replit works for IPv4, therefore no ProxyCommand setting needed<br/>#ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p</p>
<h1>暫放資料</h1>
<p><span>2.分組<a href="https://github.com/mdecd2024/2a-midag2">倉儲</a></span></p>
<p><span>3.建立方法 </span></p>
<p><span>a.利用<a href="https://github.com/mdecycu/cmsimde_site">此倉儲</a>作為 Template</span></p>
<p><span>b.新增一個名稱為 cd2024 的倉儲</span></p>
<p><span>4.維護方法 </span></p>
<p><span> a.利用Codespaces </span></p>
<p><span> b.git add . // git commit // git push 等進行維護</span></p>
<p>  啟動動態</p>
<p>python3 main.py</p>
<h1>每周進度(網誌)</h1>
<h2>Ｗ1</h2>
<p>1.建立<span>個人 cd2024倉儲</span></p>
<p><span>連結：<a href="https://github.com/41123108/cd2024">https://github.com/41123108/cd2024</a></span></p>
<p><span>*補充細節(擷取自老師blog)：</span></p>
<p>登入 github.com, 連結到<span> </span><a href="https://github.com/mdecycu/cmsimde_site">https://github.com/mdecycu/cmsimde_site</a>, 利用此倉儲作為 Template, 新增一個名稱為 cd2024 的倉儲, 並且將其 main 分支設為網頁根目錄.</p>
<p><a href="https://github.com/mdecycu/cmsimde_site">https://github.com/mdecycu/cmsimde_site</a><span> </span>與<span> </span><a href="https://github.com/mdecycu/cmsite">https://github.com/mdecycu/cmsite</a><span> </span>的差別為, 目前的 Template 將 cmsimde 當作目錄, 而非 cmsite 中的子模組.</p>
<p>上述<a href="https://nfuedu-my.sharepoint.com/:v:/g/personal/yen_nfu_edu_tw/ETTxsR2xBJ1Mg1Ikuz0lscEB5heQCnNRxTnzD1OPTkDPEA?nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJPbmVEcml2ZUZvckJ1c2luZXNzIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXciLCJyZWZlcnJhbFZpZXciOiJNeUZpbGVzTGlua0NvcHkifX0&amp;e=bPQk4F">建立個人課程 cd2024 倉儲與網站的操作影片</a>, 建立的網站為：<span><a href="https://github.com/41123108/cd2024">https://github.com/41123108/cd2024</a></span></p>
<p>2.加入課程cd2024-Teams</p>
<p>Team code: p0961sy</p>
<p>連結：<a href="https://teams.microsoft.com/l/team/19%3AWmR48Le8_pC1F-V1UU4HTMuKE0PUC8eYA4pZsP0Icn81%40thread.tacv2/conversations?groupId=5f487589-fa28-471e-a083-f2ba6141545f&amp;tenantId=e650a2d7-e923-45bb-8fa6-1af5b0f72f09">https://teams.microsoft.com/l/team/19%3AWmR48Le8_pC1F-V1UU4HTMuKE0PUC8eYA4pZsP0Icn81%40thread.tacv2/conversations?groupId=5f487589-fa28-471e-a083-f2ba6141545f&amp;tenantId=e650a2d7-e923-45bb-8fa6-1af5b0f72f09</a></p>
<p>3.下載可攜套件檔案</p>
<p>下載可攜程式環境:<span> </span><a href="http://229.cycu.org/portable_2024.7z">portable_2024.7z</a><span> </span>(需要密碼, 下載 540MB, 解開壓縮後約 1.8GB)</p>
<p>下載<span> </span><a href="http://229.cycu.org/miktex-portable.7z">miktex-portable.7z</a><span> </span>(需要密碼, 下載 167MB, 解開壓縮檔案後約 1GB)</p>
<p>4.<span>從 Replit Account 設定 Connect 連結到 Github使雙方互相信任</span></p>
<p>[<a href="https://nfuedu-my.sharepoint.com/personal/yen_nfu_edu_tw/_layouts/15/stream.aspx?id=%2Fpersonal%2Fyen%5Fnfu%5Fedu%5Ftw%2FDocuments%2F2024%2Fcd2024%2Fvideo%2Fcd2024%5F2b%5F2%5F%E5%A6%82%E4%BD%95%E5%BE%9E%20Replit%20Account%20%E8%A8%AD%E5%AE%9A%20Connect%20%E9%80%A3%E7%B5%90%E5%88%B0%20Github%2Emp4&amp;nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJPbmVEcml2ZUZvckJ1c2luZXNzIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXciLCJyZWZlcnJhbFZpZXciOiJNeUZpbGVzTGlua0NvcHkifX0&amp;ga=1&amp;referrer=StreamWebApp%2EWeb&amp;referrerScenario=AddressBarCopied%2Eview%2Ebf535ee6%2D94d4%2D4055%2Da0e2%2D4a0db9cda02a">操作講解影片</a>]</p>
<p>個人連結成果展示：</p>
<p><img alt="" height="231" src="/images/螢幕擷取畫面 2024-05-31 145441.png" width="748"/><img alt="" height="326" src="/images/螢幕擷取畫面 2024-05-31 145413.png" width="748"/></p>
<p>5.靜態更新+推送</p>
<p><span>將倉儲 import 至 Replit 改版後推回 github</span></p>
<p>步驟：(1)Edit編輯-<span>(2)更新內容-</span><span>(3)Save儲存-</span><span>(4)Convert轉靜態-</span><span>(5)到Rrpit的Git-(6)簡述更新內容+提交-(7)push推到遠端-(8)Confirm確認推送改版</span></p>
<p><span>(remote遠端)</span></p>
<p><iframe allowfullscreen="allowfullscreen" frameborder="0" height="360" scrolling="no" src="https://nfuedu-my.sharepoint.com/personal/yen_nfu_edu_tw/_layouts/15/embed.aspx?UniqueId=6d180302-f0c4-4e49-8f37-99ac21124330&amp;embed=%7B%22ust%22%3Atrue%2C%22hv%22%3A%22CopyEmbedCode%22%7D&amp;referrer=StreamWebApp&amp;referrerScenario=EmbedDialog.Create" title="cd2024_2b_4_說明如何將倉儲 import 至 Replit 改版後推回 github.mp4" width="640"></iframe></p>
<p>6.建立個人網誌</p>
<p>41123108<a href="https://41123108.github.io/cd2024/blog/">網誌</a>：<a href="https://41123108.github.io/cd2024/blog/">https://41123108.github.io/cd2024/blog/</a></p>
<p>7.學習如何編輯/更新網誌(每周更新)</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="452" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/boTF4TcdFLg" title="cd2024 2a 1 blog setup 1" width="881"></iframe></p>
<p>8.設定 Github 帳號的雙重認證</p>
<p>使用 Authy App認證，在Github帳號下的Setting中以Password and authentication啟用雙重認證, <a href="https://nfuedu-my.sharepoint.com/:v:/g/personal/yen_nfu_edu_tw/EQkTC4PryY5KrohZdneAygIB1d2FCzwpl2tn8cdyG-Q8Vg?nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJPbmVEcml2ZUZvckJ1c2luZXNzIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXciLCJyZWZlcnJhbFZpZXciOiJNeUZpbGVzTGlua0NvcHkifX0&amp;e=L28Ued">說明如何設定 Github 雙重認證</a>, 其中手機必須先安裝<span> </span><a href="https://github.com/mobile">Github Mobile</a>, 也可以使用<span> </span><a href="https://authy.com/download/">Authy App</a><span> </span>作為認證套件, 一旦在 Github 帳號下的 Setting 中的 Password and authentication 啟用雙重認證, 最後必須下載對應的 Recovery codes 並存入隨身碟, 而且要寄到個人的電子郵箱.</p>
<h2>Ｗ2</h2>
<p># 加入分組2a-midag2<br/>主要利用 Github Classroom 進行協同分組<br/>經由組長建立各組的Team midag，再讓組員自行加入<br/>群組2a-midag2的GitHub連結：[倉儲連結]<br/>[倉儲連結]:https://github.com/mdecd2024/2a-midag2</p>
<p>*組長操作(難)：<br/>1.說明甲班第一組組長如何建立 midag1 Team, 並利用 Codespaces 維護 2a-midag1 分組倉儲<br/>[影片網址1]:<a href="https://nfuedu-my.sharepoint.com/:v:/r/personal/yen_nfu_edu_tw/Documents/2024/cd2024/video/cd2024_2a_w2_3_%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B%E5%90%84%E7%B5%84%E7%9A%84%20Team%20midag1%20%E4%B8%A6%E5%88%A9%E7%94%A8%20Codespaces%20%E7%B6%AD%E8%AD%B7%E5%85%A7%E5%AE%B9.mp4?csf=1&amp;web=1&amp;e=GpJvE9&amp;nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJTdHJlYW1XZWJBcHAiLCJyZWZlcnJhbFZpZXciOiJTaGFyZURpYWxvZy1MaW5rIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXcifX0%3D">https://nfuedu-my.sharepoint.com/:v:/r/personal/yen_nfu_edu_tw/Documents/2024/cd2024/video/cd2024_2a_w2_3_%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B%E5%90%84%E7%B5%84%E7%9A%84%20Team%20midag1%20%E4%B8%A6%E5%88%A9%E7%94%A8%20Codespaces%20%E7%B6%AD%E8%AD%B7%E5%85%A7%E5%AE%B9.mp4?csf=1&amp;web=1&amp;e=GpJvE9&amp;nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJTdHJlYW1XZWJBcHAiLCJyZWZlcnJhbFZpZXciOiJTaGFyZURpYWxvZy1MaW5rIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXcifX0%3D</a></p>
<p>/細節說明(擷取自老師blog)：<br/>由於各分組網站從 Github Classroom 執行配置, 因此該倉儲位於 mdecd2024 帳號下, 雖然各組組員具備對此分組倉儲改版的權限, 但是若將分組倉儲 import 到 Replit, 因為其倉儲擁有者為 mdecd2024, 因此無法從 Replit accoount 項下進行授權, 但是可以利用 ssh-keygen 建立 .ssh 目錄下的 id_rsa 與 id_rsa.pub, 之後除了將公鑰送到 Github 之外, 還需要在 .ssh 目錄中建立 config, 且將倉儲 .git/config 中的 https 協定改為 SSH.<br/>根據上述流程, 可以在 Replit 中以 SSH 模式取得對 Github 帳號下特定倉儲的改版全縣, 只不過 Replit 的免費帳號環境會不定時刪除 /home/runner/.ssh 目錄中的授權資料, 因此若要使用 Replit 維護從 Github Classroom 取得授權的分組倉儲, 必須使用程式方法配置 .ssh 中的 id_rsa 與 config 檔案.</p>
<p>2.學習使用 Replit 管理從 Classroom 取得的分組倉儲<br/>影片說明(不太理解)：<iframe allowfullscreen="allowfullscreen" frameborder="0" height="360" scrolling="no" src="https://nfuedu-my.sharepoint.com/personal/yen_nfu_edu_tw/_layouts/15/embed.aspx?UniqueId=921fbe09-bf6b-4ce9-aa92-a08d6797871b&amp;embed=%7B%22ust%22%3Atrue%2C%22hv%22%3A%22CopyEmbedCode%22%7D&amp;referrer=StreamWebApp&amp;referrerScenario=EmbedDialog.Create" title="cd2024_2a_w2_4_利用 Replit 管理 Github Classroom 分組倉儲.mp4" width="640"></iframe>*<br/>待各分組的期中報告 Team 與倉儲全部建立就緒後, 則甲班學員後續可配合期末作業名稱 2a2, 由甲班各組組長建立 Team finalag1, finalag2 ....等.(嗯???...)</p>
<p><br/># 利用Codespaces維護群組倉儲內容<br/>教學影片：<iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="631" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/mx8A_qwlTik" title="cd2024 2a w2 3 如何建立各組的 Team midag1 並利用 Codespaces 維護內容 3" width="1120"></iframe></p>
<p># 利用近端可攜系統維護分組網站(待學)<br/>學習使用一二年級所學的維護方式打開 puttty.exe (PuTTY) 操作<br/>影片說明(不太理解)：<iframe allowfullscreen="allowfullscreen" frameborder="0" height="360" scrolling="no" src="https://nfuedu-my.sharepoint.com/personal/yen_nfu_edu_tw/_layouts/15/embed.aspx?UniqueId=45d501f1-1610-44db-bbe8-cb62901a7e5b&amp;embed=%7B%22ust%22%3Atrue%2C%22hv%22%3A%22CopyEmbedCode%22%7D&amp;referrer=StreamWebApp&amp;referrerScenario=EmbedDialog.Create" title="cd2024_2a_w2_5 如何利用近端可攜環境與外部 IPv4 開啟動態網站.mp4" width="640"></iframe></p>
<p># 乙班-設定網誌<br/>利用 [OBS] 加上廣播系統錄製的-設定個人倉儲中的 Pelican 網誌<iframe allowfullscreen="allowfullscreen" frameborder="0" height="360" scrolling="no" src="https://nfuedu-my.sharepoint.com/personal/yen_nfu_edu_tw/_layouts/15/embed.aspx?UniqueId=18850093-faee-4db7-ad4c-64f6994e8252&amp;embed=%7B%22ust%22%3Atrue%2C%22hv%22%3A%22CopyEmbedCode%22%7D&amp;referrer=StreamWebApp&amp;referrerScenario=EmbedDialog.Create" title="cd2024_2a_1_blog_setup.mp4" width="640"></iframe></p>
<h2>Ｗ３</h2>
<p>Latex使用 <strong><a href="https://www.overleaf.com/project">overleaf</a> 編譯</strong></p>
<p>資料放置雲端：<a href="https://drive.google.com/drive/folders/13bND2RXNJxtCFpjTJoKiJRbPnF36IrYH?usp=sharing">https://drive.google.com/drive/folders/13bND2RXNJxtCFpjTJoKiJRbPnF36IrYH?usp=sharing</a></p>
<p>個人載點：<a href="/downloads/Latex_41123108.zip">/downloads/Latex_41123108.zip</a></p>
<p>第二組載點：<a href="/downloads/Latex_群組.zip">/downloads/Latex_群組.zip</a></p>
<h2>Ｗ４</h2>
<h3>翻譯影片</h3>
<p><br/>挑選一部曾經課堂上傳影片中填上字幕<br/>分組翻譯解析課程影片時長27分<br/>[<a href="https://youtu.be/STdD7mAXJd4">影片連結</a>]<iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="351" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/STdD7mAXJd4" title="wcm2024 1a w3 3 如何在 replit 自設  ssh 維護分組倉儲 1" width="653"></iframe><br/>影片字幕中整理出逐字稿(雲端空間呈現)<br/>[<a href="https://drive.google.com/drive/folders/1x4UKAOeObbtshYUs3SRcp6dlgPg63eEn?usp=sharing">逐字稿</a>]</p>
<p># 教學影片分組整理並自評<br/>假如你好奇這個概念哪裡來的: 請參考[反思一] and [反思二].<br/>[反思一]:https://github.com/mdecycu/cd2024/discussions/2<br/>[反思二]:https://github.com/mdecycu/mdecycu.github.io/discussions/3<br/>對於事不關己或者不明白為何團隊中的成員 (這裡指教與學的相關人、事與物), 總讓人提不起興趣, 但若能在過程中找到主要在乎的角色、任務或者緣由, 或許就能從應付著手, 一直到終於了解天下沒有白吃的午餐, 所有的努力付出, 終究不會白費.</p>
<p>此外, 假如想參考先前學長推甄研究所的相關資訊, 請利用 Team code: n9k585c 進入自行查看.</p>
<p># w4 2a 分組任務<br/>請各組自行搜尋前面已經發布的教學影片, 分別</p>
<p>在影片上填上字幕, 另行上傳到可以嵌入到各分組的網站上<br/>從影片字幕中整理出逐字稿, 放在影片下方, 以 .txt 連結安排<br/>並在各嵌入的教學影片下方, 以摘要方式說明該影片的教學重點</p>
<p># Github 個人與分組倉儲的維護方式<br/>個人的倉儲名稱為 cd2024, 而期中的分組倉儲位於 mdecd2024 帳號下, 以2a 開頭, 加上 "-" 之後再補上 midag + 組別, 且各組員的 cd2024 個人倉儲必須設為各分組倉儲的子模組, 目的在各組員可以自行管理並維護自己的課程倉儲, 並決定要引入分組倉儲的內容版次.</p>
<p>各組員與分組倉儲的資料, 包括文字資料 (含 LaTeX 報告章節資料)、零組件檔案、零件工程圖或組立圖檔 (含 BOM 與爆炸圖), 以及目前正在整理的教學影片, 或者是各學員將操作流程錄製成的影片或 Wink 資料.</p>
<p># 第一種介紹的倉儲維護方式 - Replit<br/>有關 Replit 的開發歷史, 可以參考這裡與 ChatGPT 的對話內容.</p>
<p>Replit 目前所提供的免費帳號, 雖然沒有太多的運算資源, 但並沒有使用時間的限制, 因此若能利用 python3 main.py 執行動態網站, 而且利用 python3 main2.py 執行靜態網站, 只要區分開動態網站與靜態網站的使用, 就可以順利在 Replit 上維護個人與分組的網站內容.</p>
<p>下載 main2.txt 與 static.txt, 其中包含 main2.py 與 static.py, 只要在 Shell 執行 python3 main2.py 就可以執行倉儲內的靜態網站檢視. 另一方面, 若要取消先前執行 python3 main2.py, 只需要在 Shell 頁面按下 ctrl + c, c 代表 cancle 也就是取消. 然後若要執行動態網站，可以在 Shell 執行 python3 main.py 或者使用 Replit 的 Run 按鍵.</p>
<p>說明如何在 Replit 檢視靜態網站教學影片</p>
<p>說明如何下載 replit_main2.7z 並在倉儲中建立兩個檔案教學影片</p>
<p>使用 Replit 維護個人網站時, 可以在登入 Github 後, 連線到 Replit 取得雙方認證, import 個人 cd2024 倉儲後, 經過改版就可以將資料推向 Github.</p>
<p>但目前免費 Replit 帳號僅允許開啟一個 Web server 埠號之外, 並無法將一個 Replit 延伸授權至兩個 Github 帳號, 因此若在個人的 Replit 帳號中 import 分組網站, 必須自行設定與 Github 帳號的推送授權, 也就是利用帳號下的 token 或 OpenSSH keys 設定.</p>
<p>首先考量在 Replit 導入的倉儲使用 token 是否可行, 答案是: 不可, 原因是: 任何人只要透過 https://replit.com/@wcms/cd2024?v=1#.git/config 就可以看到免費帳號下的任一個倉儲的 .git/config, 若其中帶有個人帳號授權的 token, 任何人都能用來對此倉儲進行改版.</p>
<p>因此剩下的方案就是採用 OpenSSH 的 keys 設定, 在各自的 /home/runner/.ssh 中配置 config 與 id_rsa, 並將 id_rsa 對應的公鑰登錄到 Github 帳號下.</p>
<p>其中由於 Replit 與 Github 都支援 IPv4 網路協定, 因此 config 設定為:<br/>1.Host github.com<br/>2.User git<br/>3.Hostname github.com</p>
<p>上述 config 設定檔案表示, Host 名稱即為 Windows 環境使用 Putty 設定時的 session 名稱, 因此 https://replit.com/@wcms/cd2024?v=1#.git/config 若採用 OpenSSH 協定對 Github 連線, 則必須將原本的:</p>
<p>上列的 "url = git@github.com:mdecycu/cd2024" 表示將透過 SSH (Secure SHell) 協定, 使用 git 作為遠端登入的帳號, 並且根據 config 中的 Host 設定做為代表字串, 連線到 Hostname, 也就是 github.com, 登入後, 利用 id_rsa 與 ":" 後的 mdecycu 帳號下的 OpenSSH 登錄的 public keys 進行比對, 若吻合, 則可以授權對旗下的 cd2024 倉儲進行改版.</p>
<p>只不過 Replit 免費帳號下的 /home/runner/.ssh 會在每次雲端系統整理的時候被系統刪除 (原因不明, 有可能是用來區分付費帳號與免費帳號的使用權限), 但是在系統刪除此一授權的區間, Replit 免費帳號使用者可以透過將設定在 /home/runner/.ssh 目錄下的 config 與 id_rsa 下載到 USB 隨身碟, 一旦發現分組倉儲下的授權被系統移除後, 再利用動態網站將 config.txt 與 id_rsa.txt (因為內建的網站允許 .txt 檔案上傳) 傳到 downloads 目錄下, 然後再利用 python3 ssh.py 將此兩個授權資料放到正確的 /home/runner/.ssh 目錄下, 並設定正確的 id_rsa 檔案存取權限 (必須移除 other 與 group 的 rwx 權限)</p>
<p>上述用來搬遷 (move) config.txt 與 id_rsa.txt, 並設定 id_rsa 檔案屬性的 ssh.py 程式如下:</p>
<p>其中的 os 模組導入後, 可以利用 os.system() 執行系統指令, 且最前面的 if 迴圈可以檢查是否存在 .ssh 目錄, 若已經被系統刪除, 可以透過 os.makedirs 建立此一目錄.</p>
<p># 第二種介紹的倉儲維護方式 - Codespaces<br/>位於 https://github.com/codespaces, 是 Github 帳號下個倉儲的延伸功能, 每一個免費 Github 帳號每個月有 120 core-hours 的使用限制, 每一個免費 codespace 最小配置 2core, 可以提升至 4core.</p>
<p>Codespaces 的網際介面為 Visual Studio Code, 支援多終端機、多埠號伺服, 且可從各倉儲的 Code 頁面中直接啟動, 並直接使用 Github 帳號的管理授權, 因此使用者登入 Github 帳號後, 可以直接利用 Codespaces 管理個人與分組倉儲, 無需額外再設定倉儲的管理授權.</p>
<p>在 Codespaces 執行動態網站的指令為 python3 main.py, 而執行靜態網站則必須從表單新增一個終端機, 然後利用 python3 -m http.server 執行靜態網站, 一旦網站啟動, Visual Studio Code 就會將內埠號轉為 443 並且利用編碼產生伺服器的網路符號名稱.</p>
<p># 第三種介紹的倉儲維護方式 - Gitpod<br/>位於 https://gitpod.io, 是一套類似 Codespaces 的雲端 IDE 服務系統, 可以直接採 Github 帳號登入, 免費使用授權時間為每月 50 小時, 若採 Github 帳號登入, 則可以直接導入該帳號下的個人倉儲進行維護.<br/>但是若導入分組倉儲, 則必須自行設定推送授權, 由於 Gitpod 並無像 Replit 帳號下的固定連線網址, 因此前述取得對分組倉儲的授權, 可以採 token 與 SSH 等兩種方式, 但目前並未測試是否設定完成的 /home/gitpod/.ssh 目錄, 是否會遭系統刪除.</p>
<p>Gitpod 與 Codespaces 相同, 支援多終端機 (Terminal) 與多埠號, 使用者可以同時執行個人與分組倉儲的動態與靜態網站.</p>
<p>在 Gitpod 執行動態網站的指令為 python3 main.py, 而執行靜態網站則必須從表單新增一個終端機, 然後利用 python3 -m http.server 執行靜態網站, 一旦網站啟動, Visual Studio Code 就會將內埠號轉為 443 並且利用編碼產生伺服器的網路符號名稱.</p>
<p># 第四種介紹的倉儲維護方式 - localhost<br/>localhost 採用的是 portable_2024 可攜程式系統, 啟動後, 可以用來執行個人與分組的倉儲維護, 只是若在 Windows 系統可以選擇較簡單的 token 綁定授權, 或者使用 Putty 設定的 SSH 使用授權, 唯一必須注意的是, Putty 所建立的 session 資料會直接登錄到操作系統的登錄檔案 (Registry), 使用者必須將此 session 以 .reg 的格式匯出, 存在隨身碟, 並在每次要使用此一授權時, 以滑鼠在實體檔案路徑下的 my_putty_session.reg (不能使用虛擬的檔案路徑, 例如: 不能點擊位於 Y: 目錄下的 .reg 登錄設定檔案)</p>
<p>localhost 中的可攜程式系統還帶有 CoppeliaSim、NX 可攜與啟動批次檔案、ShareX、Wink 以及 Solvespace 等檔案, 其中的 CoppeliaSim 用於控制系統設計與模擬, 而 NX 則用於各組員協同繪製目標產品的零組件, ShareX 與 Wink 則用來建立操作流程影片, Solvespace 則可用於平面機構模擬以及初步的零組件尺寸規劃用.</p>
<p>在 localhost 執行動態網站的指令為 python cmsimde/wsgi.py, 也可以透過 cms.bat 執行上列指令.</p>
<p>而執行靜態網站則可以在另一個命令列中, 利用 python3 -m http.server 執行靜態網站, 一旦網站啟動, Python 就以內建的 8000 作為伺服器埠號, 並在 http://localhost:8000 中伺服.</p>
<p># 利用 NX1872 協同繪製零組件<br/>註: 目前可下載最新的 NX 版本為 2312.4001, 惟系上授權伺服器僅配置到 2206, 必須更新授權後才可以支援 2212、2306 與 2312 版本 (Siemens 每半年發布一個 NX 新版本).</p>
<p>從電腦輔助設計室中的電腦 C:\Program Files\Siemens\NX1872 取得所需的 NX 套件目錄檔案, 之後將 NX1872 目錄存入隨身碟後, 可利用下列 start_USB_nx1872.bat 啟動.</p>
<p>電腦輔助設計室中 C: 安裝 NX1872, D: 則配置 NX2206 與 NX12, 若在電腦教室則可利用下列批次檔案啟動 NX, 若在各自的電腦或隨身碟帶有各版次的 NX 資料, 只需要透過網路取得授權, 就可直接從 USB 中執行各版次的 NX.</p>
<p>下載NX2027_lite (需要密碼, 解開後約 8G, 這個版本僅供參考)</p>
<p>下載 Siemens NX1872.7z (需要登入 @nfu.edu.tw, cd2024 採用電腦安裝的 NX1872 或隨身碟中的 NX1872)</p>
<p>使用不同版本 NX 執行繪圖, 該如何協同設計?</p>
<p>start_USB_nx1872.bat 可以啟動 USB 隨身碟中的 NX1872.</p>
<p><br/>當使用 USB 隨身碟上的 NX1872 檔案資料啟動 NX 時, 採用 subst z: "NX1872" 表示將 "NX1872" 目錄透過 subst 指令, 讓 Windows 操作系統視為 z: 槽, 所以要關閉 NX 且取消 subst 設定, 必須執行下列的 stop.bat 指令批次檔案.</p>
<p>下列 start_cadlab_nx1872.bat 則可以利用 C: 安裝的 NX1872 啟動. 必須特別注意的是, 無論使用 USB 或電腦安裝的套件啟動, 相關設定檔案均會存在電腦的 AppData 目錄中. 就 NX1872 而言, 這些設定檔案會存在 C:\Users\Admin\AppData\Local\Siemens\NX1872 目錄中, 使用者必須在啟動可攜時將先前的設定轉存至對應的目錄下. 亦即, 必須在完成 NX 設定當下, 將 AppData\Local\Siemens\NX1872 目錄設定資料複製到隨身碟, 並利用 Xcopy 指令, 在啟動隨身程式系統時, 將先前的設定複製到特定的位置中.</p>
<p>例如: Xcopy %Disk%:\home_ipv6\AppData\Local\Siemens\NX1872 C:\users\%USERNAME%\AppData\Local\Siemens\NX1872 /E /H /C /I /Y 就可讓 NX 啟動時使用先前的設定內容.</p>
<p>至於 Xcopy 指令的 /E 表示要複製包含空白目錄的所有目錄與子目錄 E 代表 Entire</p>
<p>/H 表示要複製隱藏檔案與系統檔案 H 代表 Hidden</p>
<p>/C 表示即使發生錯誤也要繼續複製 C 代表 Continue</p>
<p>/I 表示如果目標不存在並且複製多個檔案, 則判定該目標為目錄, I 可能代表 If</p>
<p>/Y 表示同意複製資料過程中的所有可能詢問回應, Y 代表一律回答 Yes</p>
<p>start_cadlab_nx2206.bat 可以利用 D: 安裝的 NX2206 啟動.</p>
<p>start_cadlab_nx12.bat 可以利用 D: 安裝的 NX12 啟動.</p>
<p></p>
<h2>Ｗ5</h2>
<p># 教學內容為先前影片整理、分組網誌的統整與 NX 零組件繪圖.</p>
<p>[cd2024 2a w5 1 組員在 Replit 以 SSH 設定管理分組倉儲的權限]<br/>[cd2024 2a w5 1 組員在 Replit 以 SSH 設定管理分組倉儲的權限]:https://youtu.be/OghJF5zYPXw</p>
<p>ODOO PLM 論文中英並列任務<br/>由各組員在其個人的 cd2024 倉儲中, 以 LaTeX 格式分工完成下列文章的英文與中文翻譯並列資料, 最後在分組網站的 Release 或 downloads 區完成 2a-midagx_report.pdf 的製作.</p>
<p>若要在近端使用可攜程式環境編譯分組 LaTeX 報告, 請下載 [miktex-portable.7z] (需要密碼, 下載 167MB, 解開壓縮檔案後約 1GB) 以及參考資料: [latex_images_github.7z] (需要密碼)<br/> [miktex-portable.7z]:http://229.cycu.org/miktex-portable.7z<br/> [latex_images_github.7z]:http://229.cycu.org/latex_images_github.7z<br/> <br/>2021 ANALYSIS OF THE ODOO SOFTWARE CAPABILITIES REGARDING PRODUCT LIFECYCLE MANAGEMENT, MANUFACTURING EXECUTION SYSTEMS AND THEIR INTEGRATION.pdf or local download (password required) (Odoo 軟體在產品生命週期管理、製造執行系統及其整合上的功能分析)</p>
<p>英文單字查詢: [2021_odoo_reading.html]<br/>[2021_odoo_reading.html]:https://mde.tw/cd2024/downloads/2021_odoo_reading.html</p>
<p>教學影片分組整理並自評<br/>請各組自行搜尋前面已經發布的教學影片, 分別</p>
<p>在影片上填上字幕, 另行上傳到可以嵌入到各分組的網站上<br/>從影片字幕中整理出逐字稿, 放在影片下方, 以 .txt 連結安排<br/>並在各嵌入的教學影片下方, 以摘要方式說明該影片的教學重點<br/>以下為相關教學影片:</p>
<p>[cd2024 2a 1 blog setup 1]<br/>[cd2024 2a 1 blog setup 1]:https://youtu.be/boTF4TcdFLg</p>
<p>[cd2024 2a 2 odoo plm簡介 2]<br/>[cd2024 2a 2 odoo plm簡介 2]:https://youtu.be/uaiWkj7uqyY</p>
<p>[cd2024 2a w2 3 如何建立各組的 Team midag1 並利用 Codespaces 維護內容 3]<br/>[cd2024 2a w2 3 如何建立各組的 Team midag1 並利用 Codespaces 維護內容 3]:https://youtu.be/mx8A_qwlTik</p>
<p>[cd2024 2a w2 4 利用 Replit 管理 Github Classroom 分組倉儲 4]<br/>[cd2024 2a w2 4 利用 Replit 管理 Github Classroom 分組倉儲 4]:https://youtu.be/rLGfbspp2r4</p>
<p>[cd2024 2a w2 5 如何利用近端可攜環境與外部 IPv4 開啟動態網站 5]<br/>[cd2024 2a w2 5 如何利用近端可攜環境與外部 IPv4 開啟動態網站 5]:https://youtu.be/vY2wRD4qwUk</p>
<p>[cd2024 2a w3 如何將學員倉儲設為分組倉儲的子模組 6]<br/>[cd2024 2a w3 如何將學員倉儲設為分組倉儲的子模組 6]:https://youtu.be/n9uB9-WSd6w</p>
<p>[cd2024 2a w3 利用分組協同建立 LaTeX 報告 7]<br/>[cd2024 2a w3 利用分組協同建立 LaTeX 報告 7]:https://youtu.be/-tSx_Vg6kfk</p>
<p># 如何統整組員子模組中的協同設計網誌<br/>當各組員每週的協同設計網誌文章放在個別的 cd2024 倉儲的 markdown 目錄中, 只要修改分組倉儲中的 pelicalconf.py, 使用 Pelican 設定中的 PATH 與 OUTPUT_PATH 變數, 指定網誌統整目錄, 就可以在分組倉儲中納入所有組員在子模組中所編寫的協同網誌.</p>
<p>實際的設定操作 pelicanconf_py.txt, 是利用 pelicanconf.py 中的程式設定段, 將子模組中 markdown 目錄的 .md 動態複製到分組倉儲中的 combined_directory, 並避開分組倉儲與學員子模組倉儲中的 pages 目錄下的 .md 檔案後, 再進行網誌轉檔, 並且所產生的網誌超文件將存入所設定的 blog 目錄.</p>
<p>完成設定後的網誌轉檔指令為: pelican -s local_publishconf.py 表示要利用 local_publishconf.py 的設定進行轉檔, 且先前有關 pelicanconf.py 的設定也將導入執行.</p>
<p>過程中, 各組員必須將個別的網誌 .md 檔案名稱加上前綴字串, 例如: "學號_" 加上獨一無二的網誌 Slug 字串名稱, 且 Category 使用該組員的學號作為標示. 之後各組統整轉檔時, 才不至於發生相同網誌文章檔案名稱衝突的錯誤, 且從各分組網誌的 Categories 中即可找到各組員所編寫的所有網誌內容.</p>
<p># 利用 NX1872 協同繪製零組件<br/>從電腦輔助設計室中的電腦 C:\Program Files\Siemens\NX1872 取得所需的 NX 套件目錄檔案, 之後將 NX1872 目錄存入隨身碟後, 可利用下列 start_USB_nx1872.bat 啟動.</p>
<p>電腦輔助設計室中 C: 安裝 NX1872, D: 則配置 NX2206 與 NX12, 若在電腦教室則可利用下列批次檔案啟動 NX, 若在各自的電腦或隨身碟帶有各版次的 NX 資料, 只需要透過網路取得授權, 就可直接從 USB 中執行各版次的 NX.</p>
<p>下載NX2027_lite (需要密碼, 解開後約 8G, 這個版本僅供參考)</p>
<p>下載 Siemens NX1872.7z (需要登入 @nfu.edu.tw, cd2024 採用電腦安裝的 NX1872 或隨身碟中的 NX1872)</p>
<p>使用不同版本 NX 執行繪圖, 該如何協同設計?</p>
<p>start_USB_nx1872.bat 可以啟動 USB 隨身碟中的 NX1872, 但必須自行在 NX1872 目錄中新增 temp 目錄用來儲存 NX 的 Syslog 系統狀態檔案.</p>
<p>start_cadlab_nx1872.bat 可以利用 C: 安裝的 NX1872 啟動.</p>
<p># Sourcetree<br/>利用 Sourcetree 可以在近端清楚看到倉儲的歷次提交內容, 也可以回復到先前的任一版本內容.</p>
<p></p>
<h2>Ｗ6</h2>
<p># Github Actions 帶有子模組的 main.yml 設定<br/>加入取子模組內容的 [main.yml] 設定<br/>[main.yml]:https://github.com/mdecd2024/2b-midbg4/blob/02599cb79d65cb1f48186c2db59b5dc9d812f599/.github/workflows/main.yml</p>
<p>on:<br/> push:<br/> branches: [pdf]<br/> pull_request:<br/> branches: [pdf]<br/> workflow_dispatch:<br/> <br/>jobs:<br/> build:<br/> runs-on: ubuntu-latest<br/> steps:<br/> - uses: actions/checkout@v4.1.1<br/> - name: Install texlive and related fonts<br/> run: |<br/> sudo apt install -y texlive texlive-xetex texlive-lang-chinese gsfonts fonts-moe-standard-kai ttf-mscorefonts-installer librsvg2-bin texlive-fonts-extra <br/> - name: Initialize submodules<br/> run: git submodule update --init --recursive<br/> - name: Test LaTeX<br/> working-directory: ./latex<br/> run: |<br/> xelatex cd_report.tex<br/> xelatex cd_report.tex<br/> xelatex cd_report.tex<br/> - name: Bump version and push tag<br/> id: tag_version<br/> uses: mathieudutour/github-tag-action@v6.1<br/> with:<br/> github_token: ${{ secrets.GITHUB_TOKEN }}<br/> - name: Create Release<br/> id: create_release<br/> uses: comnoco/create-release-action@v2.0.5<br/> env:<br/> GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}<br/> with:<br/> tag_name: ${{ steps.tag_version.outputs.new_tag }}<br/> release_name: Release ${{ steps.tag_version.outputs.new_tag }}<br/> draft: false<br/> prerelease: false<br/> - name: Upload Release Asset<br/> id: upload-release-asset <br/> uses: shogo82148/actions-upload-release-asset@v1.7.3<br/> env:<br/> GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}<br/> with:<br/> upload_url: ${{ steps.create_release.outputs.upload_url }} <br/> asset_path: ./latex/cd_report.pdf<br/> asset_name: cd_report.pdf<br/> asset_content_type: pdf<br/>其中加入取子模組內容的設定為:</p>
<p>- name: Initialize submodules<br/> run: git submodule update --init --recursive<br/>[2b-midbg4 cd_report.tex] 中的範例報告第一章, 取自其組員分組網站中的 latex 目錄, 且圖片檔案也是沿用分組倉儲中的設定, 取自組員 images 目錄.<br/>[2b-midbg4 cd_report.tex]:https://github.com/mdecd2024/2b-midbg4/blob/02599cb79d65cb1f48186c2db59b5dc9d812f599/latex/cd_report.tex</p>
<p># 更新分組倉儲中的分組倉儲<br/>[cd2024 2a w6 取下子模組, 以及更新學員倉儲內容]<br/>[cd2024 2a w6 取下子模組, 以及更新學員倉儲內容]:https://youtu.be/BtYUHe8Actk</p>
<p>使用 [Audacity] 與 [Openshot] 將音軌的雜音消除後, 輸出為以下的[影片]：<br/>[Audacity]:https://portableapps.com/apps/music_video/audacity_portable<br/>[Openshot]:https://portableapps.com/apps/music_video/openshot-portable<br/>[影片]:https://youtu.be/tE5MZzl_7P8</p>
<p>[cd2024 2a w6 利用 pelicanconf py 整合各組員的網誌]<br/>[cd2024 2a w6 利用 pelicanconf py 整合各組員的網誌]:https://youtu.be/XkImjlZSGGk</p>
<p></p>
<h2>Ｗ7</h2>
<p></p>
<p></p>
<h2>Ｗ8</h2>
<p></p>
<p></p>
<h2>Ｗ9(期中)</h2>
<h3>Latex</h3>
<p>使用 <strong><a href="https://www.overleaf.com/project">overleaf</a> 編譯</strong></p>
<p>資料放置雲端：<a href="https://drive.google.com/drive/folders/13bND2RXNJxtCFpjTJoKiJRbPnF36IrYH?usp=sharing">https://drive.google.com/drive/folders/13bND2RXNJxtCFpjTJoKiJRbPnF36IrYH?usp=sharing</a></p>
<p>個人載點：<a href="/downloads/Latex_41123108.zip">/downloads/Latex_41123108.zip</a></p>
<p>第二組載點：<a href="/downloads/Latex_群組.zip">/downloads/Latex_群組.zip</a></p>
<p>個人編譯畫面圖示：</p>
<p><img alt="" height="410" src="/images/螢幕擷取畫面 2024-06-12 235034.png" width="800"/></p>
<p>整合至群組：</p>
<p><img alt="" height="534" src="/images/螢幕擷取畫面 2024-06-12 234954.png" width="695"/></p>
<h3>鋼球平衡台負責問題查詢</h3>
<p><span>7</span><span>.1 協同整理資料 協同整理資料是團隊合作中至關重要的步驟，確保所有成員對項目的進展和資料保持一致了解。以下是一些基本方法：</span><span> 版本控制：使用版本控制系統如Git，或協同工具自帶的版本控制功能，跟蹤文件的變更歷史。可以利用GitHub Codespaces和Replit這類平台來協同編程和開發。 文件命名規則：設定統一的文件命名規則，方便搜尋和管理。 定期同步：定期進行資料同步，確保所有成員手中的資料是最新的。 </span></p>
<p><span>7</span><span>.2 編寫網誌 網誌是分享項目進展、技術細節和心得體會的重要途徑。以下是編寫網誌的基本步驟：</span><span> 確定主題：選擇一個與項目相關且具有吸引力的主題。 撰寫草稿：組織文章結構，撰寫草稿，確保邏輯清晰、內容充實。使用Replit可以方便地協同編寫和編輯草稿。 加入媒體：適當插入圖片、圖表或視頻，增加文章的可讀性和吸引力。 校對和編輯：檢查語法和拼寫錯誤，優化表達方式，確保文章質量。 發布和推廣：選擇合適的平台（如公司官網、技術博客等）發布網誌，並在社交媒體上進行推廣。 </span></p>
<p><span>7</span><span>.3 建立網際簡報 網際簡報是一種在線展示項目進展和成果的方式。以下是建立網際簡報的基本步驟：</span><span> 選擇工具：選擇如Google Slides、Microsoft PowerPoint、Prezi等工具來創建簡報。 設計模板：選擇或設計一個符合項目風格的簡報模板。 組織內容：將簡報分成不同部分（如介紹、方法、結果、結論），確保邏輯清晰。 添加媒體：加入圖片、視頻、圖表等多媒體內容，增強簡報的視覺效果和說服力。 練習展示：在正式展示前，進行多次練習，確保對內容的熟悉和展示的流暢。 </span></p>
<p><span>7</span><span>.4 結案報告 結案報告是總結項目過程和成果的重要文件。以下是撰寫結案報告的基本步驟：</span><span> 封面頁：包含報告標題、項目名稱、日期和作者信息。 目錄：列出報告的主要章節和頁碼，便於查找。 引言：簡要介紹項目背景、目標和範圍。 方法：詳細描述項目過程中的方法和技術細節。 結果：展示項目成果，包括數據、圖表和分析結果。 討論和結論：分析結果的意義，總結項目經驗，提出改進建議或未來工作方向。 附錄：附上相關的附加資料，如原始數據、程式碼或其他參考資料。 在撰寫技術報告時，使用LaTeX可以幫助生成專業且格式一致的文檔。以下是一些基本的LaTeX使用指南：</span><span> LaTeX模板：選擇或設計一個符合項目需求的模板。 基本語法：學習LaTeX的基本語法，如標題、段落、列表、表格、圖片等。 數學公式：使用LaTeX的數學模式來編寫精確的數學公式。 文檔編譯：使用如Overleaf、TeXShop等工具來編譯LaTeX文檔，生成PDF文件。</span></p>
<p></p>
<h2>Ｗ10</h2>
<p># W10 起 Replit 已經可以用來維護分組倉儲<br/>[Replit 帳號維護分組倉儲]<br/>[Replit 帳號維護分組倉儲]:https://github.com/mdecycu/cd2024/discussions/10</p>
<p> # 建立各班學員的倉儲、網站與分組連結</p>
<br/><br/>## 任務一:
<p>[已知: 2b 初步資料放入數列] 可以將 [2b.txt] 即時資料取出, 並且將每一行隔開後, 逐一放入數列.<br/>[已知: 2b 初步資料放入數列]:https://mde.tw/cd2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/8ba6fa28317bc7a784d8350e7bc33580/raw/27ae4eb5669e4495b3e3a164d404628913a011ed/2b_w10_step1.py<br/>[2b.txt]:https://mdecd2024.github.io/2bstud-2bsite/downloads/2b.txt</p>
<p>後續處理: 只要透過 for 重複迴圈, 就可以從上列資料中每位學員的基本資料 (學號、Github 帳號與組別) 中直接在網頁建立所需的 html.</p>
<p>學員倉儲連結 template: https://github.com/學員帳號/cd2024</p>
<p>學員網站連結 template: https://學員帳號.github.io/cd2024</p>
<p>2b 分組倉儲連結 template: https://github.com/mdecd2024/2b-midbg組別</p>
<p>2a 分組倉儲連結 template: https://github.com/mdecd2024/2a-midag組別</p>
<p>處理結果:<br/>[列出 2b 各學員評分相關網站]<br/>[列出 2b 各學員評分相關網站]:https://mde.tw/cd2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/8ba6fa28317bc7a784d8350e7bc33580/raw/9e0540c36b0c6d74065ddc23ed3f365e1ba14c53/2b_w10_step2.py<br/>[列出 2a 各學員評分相關網站]<br/>[列出 2a 各學員評分相關網站]:https://mde.tw/cd2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/8ba6fa28317bc7a784d8350e7bc33580/raw/a035644a54de63d3b920211e78e7532837bda516/2a_w10_step2.py<br/>鋼球平衡台 PID 控制與模擬</p>
<br/><br/>## 任務二:
<p>請下載 [cd2024_ball_balancing_platform_control_ref.7z] , 閱讀後請將摘要內容放入個人與分組網誌中.<br/>[cd2024_ball_balancing_platform_control_ref.7z]:http://229.cycu.org/cd2024_ball_balancing_platform_control_ref.7z<br/>閱讀結果:</p>
<p>各篇論文要點摘要：<br/>#### 論文一：2D Ball Balancer Control using QUARC<br/>１內容摘要:這份指南將引導您通過使用QUARC控制2D球平衡器的過程。您將學習如何從頭原理建模、分析和有效控制系統。摘要內容包括實驗的先決條件、系統建模和傳遞函數的獲取，以及實現2D球平衡器的期望控制響應的方法。<br/>２總結:這份指南旨在教導如何使用QUARC控制2D球平衡器。內容包括先決條件、系統建模、傳遞函數獲取以及實現期望控制響應的方法。通过这份指南，用户将学习如何有效地模拟、分析和控制2D球平衡器系统。<br/>#### 論文二：A real time control system for balancing a ball on a platform with FPGA parallel implementation<br/>１內容摘要:這份文件介紹了一個利用PID調節器和FPGA平行實現的實時控制系統，旨在提高在平台上平衡球的準確性。該系統的設計包括開發平衡球在平台上的轉換函數、合成PID調節器以及在FPGA上進行平行計算的實現。通過自然模擬，證實了對平台上球位置調節準確性的提高。這項研究的目的是為了應對當今控制系統面臨的新挑戰，如物聯網、無人駕駛汽車和擁有多個參數的複雜對象。這表明了對於開發、研究和設計具有多個參數的複雜對象的實時控制系統的需求。<br/>２總結:這份文件介紹了一個新的實時控制系統，利用PID調節器和FPGA平行實現，旨在提高在平台上平衡球的準確性。該系統的設計包括開發轉換函數、合成PID調節器以及在FPGA上進行平行計算。通過自然模擬驗證了對平台上球位置調節準確性的提高。這項研究突顯了對於控制系統在處理物聯網、無人駕駛汽車等新挑戰時的重要性，並強調了實時控制系統對於具有多個參數的複雜對象的開發和研究的價值。<br/>#### 論文三：Ball on the plate balancing control system<br/>１內容摘要:這份文件描述了設計一個用於平衡球在平板上的實驗室測試臺。系統利用微控制器和控制算法來追踪球的位置並進行控制。通過電阻式觸摸屏確定物體位置，並透過步進馬達的轉角確定平板傾斜角度。控制系統以100 Hz頻率運行，讀取球的坐標和平台傾角信息。系統目標是將物體帶到觸摸屏中心點並保持在該位置，儘管受到干擾。实驗結果顯示，控制系統成功維持球在觸摸屏中心點。<br/>２總結:這份文件介紹了一個用於平衡球在平板上的實驗室測試臺，利用微控制器和控制算法來追踪和控制球的位置。系統包括電阻式觸摸屏和步進馬達，以確定物體位置和平板傾斜角度。控制系統旨在將球帶到觸摸屏中心並保持穩定。实驗結果表明，控制系統成功實現了維持球在觸摸屏中心的目標。<br/>#### 論文四Construction and theoretical study of a ball balancing platfor<br/>１內容摘要:這份文件探討了一個球平衡平台的構造和理論研究，旨在通過自動控制理論的應用來探討穩定動態系統的局限性。該文件包括了構造球平衡平台的方法、將物理和計算機模擬結果進行比較的結果，以及引入比例-積分-微分控制器來幫助平衡平台上的球並觀察系統穩定性方面的限制。<br/>２總結:這份文件掔探討了通過自動控制理論來穩定動態系統的限制。研究通過構造球平衡平台，比較物理和計算機模擬結果，並引入比例-積分-微分控制器來平衡球在平台上的運動。研究還探討了在穩定自然不穩定或半穩定系統時的性能限制<br/>#### 論文五：Design and Implementation a Ball Balancing System for Control Theory Course<br/>１內容摘要:這個專案旨在設計和實現一個球平衡系統，用於控制理論課程。該系統利用微控制器和控制算法來保持一個球在樑上平衡。通過實時反饋，系統調整樑的角度以最小化誤差，並教導學生有關PID控制。該系統採用了伺服馬達、超聲波感測器和3D打印的PVC塑料樑，並使用MATLAB進行模擬和視覺化。這個項目有助於學生理解控制理論的應用，並提供了一個實用的實驗平台。<br/>２總結:這個專案設計了一個球平衡系統，旨在教控制理論課程的學生應用PID控制。系統利用微控制器和控制算法來調整樑的角度，以保持球在樑上平衡。通過實時反饋，系統能夠最小化誤差，並提供了一個實用的實驗平台，幫助學生理解控制理論的應用。<br/>#### 論文六：Simulation and Experimental Study of Ball Position Control at Biaxial Platform using State Space Approach<br/>１內容摘要:這份文件探討控制理論的實際應用，特別聚焦於在雙軸平台上平衡球的應用。文件中描述了如何利用控制結構在防衛軍事技術、攝影穩定和太空火箭垂直降落等高端應用中使用。研究人員通常如何在應用實踐中探索新的控制理論，控制結構對防衛軍事技術有哪些實際影響，以及文件中描述的基準系統是如何在測試控制結構中使用的。<br/>２總結:這份文件探討了控制理論在平衡球的應用中的實際應用。通過在雙軸平台上平衡球來研究控制結構的性能，並探討了在防衛軍事技術和高端應用中的潛在應用。文件中還介紹了基準系統的設計和控制結構的比較，以及控制器參數的計算方法。整體而言，這份文件提供了有關控制系統設計和應用的深入設計和比較，並強調了其在不同領域中的潛在應用價值。</p>
<p>接下來, 必須要設法了解, 哪一篇或哪幾篇論文對我們解決下列問題最有參考價值!</p>
<p>請從下列檔案中, 在個人與分組網站中說明從零組件繪圖、轉入 CoppeliaSim, 並透過 PID 控制後, 展示在不同的控制參數設定, 鋼球的 x 座標與 y 座標運動路徑圖.<br/>[ball_beam_balancing_PID_control_coppeliasim_1d_and_2d_cd2024_w9.7z] (password required to download)<br/>[ball_beam_balancing_PID_control_coppeliasim_1d_and_2d_cd2024_w9.7z]:http://229.cycu.org/ball_beam_balancing_PID_control_coppeliasim_1d_and_2d_cd2024_w9.7z</p>
<p>[Solvespace_model _2d_for_cd2024_w6.7z]<br/>[Solvespace_model _2d_for_cd2024_w6.7z]:https://mde.tw/cd2024/downloads/Solvespace_model%20_2d_for_cd2024_w6.7z</p>
<p>實習步驟:</p>
<p>開啟可攜程式系統中的 CoppeliaSim 開啟鋼球平衡台模擬場景 啟動可攜程式系統, pip install keyboard cbor pyzmq matplotlib 在 SciTE 中執行上列程式, 確定系統穩定後, 按下 q 終止模擬 matplotlib 將畫出鋼球在平台上的 x 與 y 座標圖</p>
<p>鋼球平衡台零組件繪圖</p>
<br/><br/>## 任務三:
<p>請根據 [Solvespace_model _2d_for_cd2024_w6.7z] 零組件尺寸, 利用 [Siemens NX1872.7z] (需要登入 @nfu.edu.tw, cd2024 採用電腦安裝的 NX1872 或隨身碟中的 NX1872) 執行零組件繪圖, 完成後請將過程影片放入個人與分組網站中.<br/>[Solvespace_model _2d_for_cd2024_w6.7z]:https://mde.tw/cd2024/downloads/Solvespace_model%20_2d_for_cd2024_w6.7z<br/>[Siemens NX1872.7z]:https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EehhlaMDzTxAlOBppbPSoPwBCzsOQxvshtNL8xJel-zbJQ?e=YwKvdH</p>
<p></p>
<h2>Ｗ11</h2>
<p># 針對課程內容做分類<br/>分成時間、任務、地點等項目並說明</p>
<p># 再次複習分支推送與合併</p>
<p>&lt;iframe width="881" height="450" src="https://www.youtube.com/embed/N4QPHMznMGc" title="cd2024 w11 說明如何在各自的分支進行內容更新, 最後再與分組分支合併, 最終才推到 main 分支" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen&gt;&lt;/iframe&gt;</p>
<p>各學員利用 NX 1872 繪製鋼球平衡台所需的零組件.</p>
<p># 課程各週任務說明<br/>/以下影片說明從第一週至今課程任務內容:<br/>&lt;iframe width="880" height="451" src="https://www.youtube.com/embed/A4wgWLZShco" title="cd2024 2a w11 第十週之後要求學員執行的任務說明" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen&gt;&lt;/iframe&gt;</p>
<p>/以下影片說明如何在個人或各組完成階段性改版之前, 先透過獨立分支進行資料改版提交與推送, 等個人階段性版本確定後, 再與分組分支合併, 最後各組的階段性版本再與建立網頁的主分支進行合併.<br/>&lt;iframe width="880" height="451" src="https://www.youtube.com/embed/N4QPHMznMGc" title="cd2024 w11 說明如何在各自的分支進行內容更新, 最後再與分組分支合併, 最終才推到 main 分支" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen&gt;&lt;/iframe&gt;</p>
<p>/以下影片說明如何設定 Siemens NX Journal 存檔格式, 並且利用 NXOpen 程式分別執行建立 block 與挖孔 (透過錄製 Journal 程式產生)後, 請設法將兩個程式合併為一個程式, 可以直接完成建立一個 block 並在其特定面上挖孔.<br/>&lt;iframe width="880" height="451" src="https://www.youtube.com/embed/2DbqX2Hin6M" title="cd2024 nxopen python 合併建立 block 與挖孔程式" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen&gt;&lt;/iframe&gt;</p>
<p>參考程式:</p>
<p>[nxopen_combine_block_and_drill_hole.py]<br/>[nxopen_combine_block_and_drill_hole.py]:https://mde.tw/cd2024/downloads/nxopen_combine_block_and_drill_hole.py</p>
<p>[利用 NXOpen Python 建立鋼球平衡台中的平台零件]<br/>[利用 NXOpen Python 建立鋼球平衡台中的平台零件]:https://mde.tw/cd2024/downloads/nxopen_platform_part.py</p>
<p>[利用 NXOpen Python 進行平台零件組立]<br/>[利用 NXOpen Python 進行平台零件組立]:https://mde.tw/cd2024/downloads/cd2024_platform_nxopen_assembly_ex.7z</p>
<p># 鋼球平衡台自動控制系統模擬<br/>請根據 [Solvespace_model _2d_for_cd2024_w6.7z] 零組件尺寸, 利用 [Siemens NX1872.7z] (需要登入 @nfu.edu.tw, cd2024 採用電腦安裝的 NX1872 或隨身碟中的 NX1872) 執行零組件繪圖, 完成後請將過程影片放入個人與分組網站中.<br/>[Solvespace_model _2d_for_cd2024_w6.7z]:https://mde.tw/cd2024/downloads/Solvespace_model%20_2d_for_cd2024_w6.7z<br/>[Siemens NX1872.7z]:https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EehhlaMDzTxAlOBppbPSoPwBCzsOQxvshtNL8xJel-zbJQ?e=YwKvdH</p>
<p>建立協同 Web-based 機電系統模擬設計必須涉及的議題包括：</p>
<p>1.如何使用 NX 執行零組件繪圖 - [NX 參考資料]<br/>[NX 參考資料]:https://me5763.github.io/lab/assets/books/NX-12-for-Engineering-Design.pdf<br/>2.如何使用1872版安裝及可攜版 - NX1872<br/>3.如何啓動及連網認證 - NX1872<br/>4.了解啓動後用戶設定的存檔位置 - NX1872<br/>5.認識 NX 的目錄模組架構 - NX<br/>6.認識 NXOpen Python 程式延伸架構 - NXOpen<br/>7.了解 Journal 程式設定、建立及執行（internal 及 run_journal.exe 用法）<br/>8.了解如何針對設計繪圖尺寸單位選擇 - 建立新零件檔案時由 Units 選單選則 mm 或 inches<br/>9.學習草圖建構、參數選用及長出特徵使用 - NX 參考資料<br/>10.學習如何完成零件組立 - NX 參考資料<br/>11.了解零組件轉檔相關知識（如選用零組件座標系統、STL格式及尺寸比例）<br/>12.了解如何轉入 CoppeliaSim，如何選擇合用的尺寸及比例<br/>13.了解如何進行場景組件的座標系統轉換<br/>14.了解開放式機構及封閉式機構的場景如何設置<br/>15.認識場景存檔的三種格式（binary與XML間的轉換及應用)及應用時機<br/>16.瞭解如何運用 Web-based 場景模擬串流<br/>17.學習如何建立場景控制程式（internal Lua、Python、Remoteapi Python、IPv4 Websocket&amp;ZMQ vs IPv6 Websocket&amp;ZMQ)<br/>18.了解如何協同整理資料、編寫網誌、建立網際簡報及結案報告</p>
<p># 各週指定任務<br/>cd2024 協同產品設計實習課程專案的內容, 主要延續 CAD2023 課程重點, 然後再透過分組, 利用 Odoo PLM 相關文獻閱讀與應用作為協同產品開發流程的參考, 實際進行鋼球平衡台與綜合球賽機器人模擬系統的協同設計.</p>
<p>各週指定任務如下:</p>
<p>1.個人 cd2024 與分組倉儲的建立及維護.<br/>2.各分組註冊一個 [第二組odoo] 帳號, 選用免費的 PLM 模組, 取得各分組的產品生命週期管理系統網域, 並將參考論文的協同翻譯流程作為工作項目, 在各分組的 PLM 網域系統中留下任務分配與紀錄, 最終產出為一份參考論文的中英文翻譯並列 pdf 檔案, 其中包含各組員的心得報告.<br/>[第二組odoo]:https://2a-mida-g2.odoo.com/odoo/action-166/1?cids=1<br/>3.指定在參考論文的翻譯與閱讀過程, 將各組員的 cd2024 課程倉儲納為分組倉儲的子模組, 可以將各組員倉儲中的 LaTeX 原始資料, 整合至分組倉儲中, 採 Github Actions 或近端使用 MikTeX 建立分組的參考論文閱讀報告 pdf 檔案(教學).<br/>4.要求各分組採協同方式, 在各教學影片上填上字幕並嵌入個人網站, 分工整理影片逐字稿與教學重點, 最後完成期中自評, 在期中考週將自評成績送至教務處.<br/>5.要求下載 Siemens NX 1872 至個人隨身碟或電腦 (含筆電), 後續專案系統的零組件繪圖可採電腦輔助設計室固態硬碟所安裝的 NX1872 或隨身碟中的可攜系統, 必須透過連網取得認證後才能開啟.<br/>6.提醒 CoppeliaSim 不同版本中存檔上的差異, 並強調 cd2024 將沿用 cad2023 課程中所使用的 4.5.1 版.<br/>7.提示 各分組可以利用可攜式 Sourcetree 套件, 在近端充分了解個人倉儲與分組倉儲的各種改版或解決衝突議題.<br/>8.在第七週摘要出 cd2024 各項分組協同模式的要點及執行方法.<br/>9.在第八週說明如何應用 AI 協助先前閱讀論文, 整理資料以及延伸模擬程式的方法, 並提出既存鋼球平衡台控制與模擬的實習步驟.<br/>10.第十週起, 要求學員完成三項實習任務.</p>
<p></p>
<h2>Ｗ12</h2>
<p></p>
<p></p>
<h2>Ｗ13</h2>
<p></p>
<p></p>
<h2>Ｗ14</h2>
<p></p>
<p></p>
<h2>Ｗ15</h2>
<p></p>
<p></p>
<h2>Ｗ16</h2>
<p># 填寫自評表單<br/>到老師倉儲 <a href="https://github.com/mdecycu/cd2024/discussions/18">https://github.com/mdecycu/cd2024/discussions/18</a> 點選discussions開啟表單<br/><span>表單</span>連結:<a href="https://forms.gle/hqoW6uv8CgBmeFQ87">https://forms.gle/hqoW6uv8CgBmeFQ87</a></p>
<p></p>
<h2>Ｗ17</h2>
<p></p>
<p></p>
<h2>Ｗ18</h2>
<p></p>
<p></p>
<h1>Latex</h1>
<p>*使用 <strong><a href="https://www.overleaf.com/project">overleaf</a>  (翻譯文件放置w3、w9)</strong></p>
<p>Latex 自行看影片整理出的程式碼：<br/>語法 \documentclass<br/>大括號：<br/>文章 article<br/>論文 report<br/>書籍 book<br/>簡報 beamer<br/>方掛號（輔助性語法)：<br/>指定文字大小 11pt<br/>\begin 開始語法{document}<br/>\end 結束語法{document}</p>
<p>\usepackage{xeCJK} 擴充文字功能<br/>\setCJKmainfont{Noto Serif CJK TC} 指定中文字型</p>
<p>\section{標題名稱}<br/>\subsection{小標題名稱}<br/>\usepackage擴充功能[margin=2cm]{geometry} 邊界寬度<br/>(top、bottom、left、right、a4paper)<br/>\usepackage{setspace}擴充簡單指令<br/>\doublespacing 增加兩倍行高<br/>\onhalfspacing 將行高設為1.5倍<br/>\setlength{\parskip}{6pt}增加行高<br/>%文字-註解<br/>\begin{titlepage}設置封面<br/>*句子分行可用多空一行或\\<br/>\begin{center}水平至中對齊<br/>\small縮小文字<br/>\large放大文字<br/>\usepackage{moresize}文字不夠醒目擴充<br/>\HUGE 把文字放更大<br/>\textbf{變粗體文字}<br/>\vspace{2cm}文字上端空2cm間隔<br/>（要注意上面沒有段落在e後面要加*）<br/>加大行距文字\\［2cm］<br/>\vfill 指令後文字設定在最底部<br/>\usepackage{graphicx} 擴充可插入圖片<br/>\includegraphics[]{圖檔名稱} 插入圖片<br/>（方掛號內 width=4.5cm 控制大小）<br/>加入註腳：<br/>1.non.\footnote{註腳內容}<br/>2.\footnotetex{註腳內容}<br/>並在插入註腳位置輸入\footnotemark.<br/>增加清單<br/>\begin{enumerate} <br/>（有加enumerate圓點改數字）<br/>\item 清單文字<br/>\end{enumerate}［擴充後數字可改其他文字］<br/>在語法內 \usepackage{enumerate} 擴充<br/>插入圖表：<br/>\begin{figure} 插入圖表的四個指令<br/>+（h）指定圖表位置<br/>1.\centering置中於目前頁面<br/>2.第二個標籤指定圖檔名稱（後端加width=7cm指定圖表大小）<br/>3.\caption{圖表底下的說明文字}<br/>4.\label{fig:chartl}文章中作為參造的標記<br/>在文章中See figure \ref{fig:chartl}將該圖的編號插入所在位置<br/>on page \pageref{fig:chartl}標示圖表的頁數<br/>表格：<br/>~\begin{table}［h］定位表格位置<br/>\centering 水平置中<br/>\begin{tabular}{c|c|c}<br/>(C:center置中對齊，l:lafe置左，r置右，| 可加可不加-可用-\hline替代）<br/>表格內&amp;連結符號區隔，分行\\<br/>\caption 表格標題<br/>\label 參造引用的標籤<br/>表示數學公式：<br/>1.$公式$在段落<br/>2.新的空行中-（中間很大的圖示公式）<br/>上-\［<br/>中-公式<br/>下-\］<br/>\sqrt{數字} 根號<br/>\frac{前分子}{後分子}<br/>\sum_{i=1起始值}^{5結束值}<br/>下標的變數 _i 表達<br/>引用文章：<br/>\usepackage{apacite} 擴充引用文章功能<br/>左上角新增空白文件 副檔名 .bib <br/>網路文章點引用 點BibTex <br/>複製貼上剛才的空白文件<br/>回文章底部<br/>\pagebreak 新增空白頁<br/>\bibliography{ref}<br/>\bibliographystyle{apacite}<br/>\cite{引用的文章}<br/>目錄與頁碼：<br/>\section*{摘要} 建立摘要的章節<br/>貼上一段甲文字（？<br/>\tableofcontent 擷取所有章節的標題自動生成目錄的文字<br/>在參考文件擴充中\usepackage［notocbib］{apacite}-(目錄不顯示)<br/>在摘要上下\pagebreak-自成一頁<br/>\renewcommand\contentsname{目錄} 重新命名指令，將英文轉中文<br/>\pagenumbering{roman} 改羅馬文字的頁碼<br/>回原文章<br/>\pagenumbering{arabic} 改阿拉伯數字頁碼<br/>\setcounter{page}{1} 將頁碼重設回第一頁</p>
<p>影片連結：<a href="https://www.youtube.com/watch?v=mQamBS6uTOc&amp;t=610s">https://www.youtube.com/watch?v=mQamBS6uTOc&amp;t=610s</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="557" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/mQamBS6uTOc" title="文章寫好了卻為排版苦惱？也許你該考慮用 LaTex 完成下一個專業的報告 (使用 Overleaf 雲端編輯器)" width="990"></iframe></p>
<h1>Codespaces</h1>
<p>Codespace指令說明</p>
<p><span>由於 Github Codespaces 免費帳號目前每月</span><a href="https://docs.github.com/en/billing/managing-billing-for-github-codespaces/about-billing-for-github-codespaces">可以使用 120 core hours</a><span>, 因此使用者可以選擇在 Github 倉儲中編輯 markdown 目錄中的網誌 .md 文章後, 只在需要利用 pelican 轉檔或啟動編輯 config/content.htm 與轉靜態網頁內容時, 才啟用 Codespaces. 如此可以最佳化使用 Codespaces 的免費 core hours.</span></p>
<p>利用 init_replit 指令安裝所需 Python 模組</p>
<h4><strong>啟動動態 指令</strong></h4>
<p>1. chmod u+x init_replit</p>
<p>2. ./init_replit</p>
<p>3. python3 main.py</p>
<h4><strong>Push 個人倉儲 指令</strong></h4>
<p>1. git add .     </p>
<p>2. git commit -m " 推的內容 "   </p>
<p>3. git push</p>
<h4>Push 小組倉儲 指令</h4>
<p><span>1. chmod u+x init_replit</span></p>
<p><span>2. ./init_replit</span></p>
<p><span>3. git submodule</span><span> update --init</span></p>
<p><span>4. cd 自己Github帳號</span></p>
<p><span>5. git pull origin main</span></p>
<p><span>6. cd ..</span></p>
<p><span>7. git add .</span></p>
<p><span>8. git commit -m"推的內容"</span></p>
<p><span>9. git push</span></p>
<h4><strong>Push 網誌 指令</strong></h4>
<p><span>1. chmod u+x init_replit</span></p>
<p><span>2. ./init_replit</span></p>
<p>3. ./gen_blog</p>
<p>4. git add .     </p>
<p>5. git commit -m " 推的內容 "   </p>
<p>6. git push</p>
<p>操作示意圖：</p>
<p><img alt="" height="481" src="/images/螢幕擷取畫面 2024-04-12 164841.png" width="855"/></p>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<p><!-- 導入 brython 程式庫 --></p>
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<p><!-- 啟動 Brython --></p>
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<p><!-- editor1 開始 --></p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<p><!-- editor1 結束 --></p>
<hr/>
<p><!-- ########################################## --></p>
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<p><!-- editor2 開始 --></p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<p><!-- editor2 結束 --></p>
<hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>